name: Trigger Deployment and Notify

on:
  push:
    branches: #[dev, test, stage, main]
      - dev
      - test
      - main
    tags: ['v*']  # Trigger on version tags (e.g., v1.0.0)
    paths-ignore: 
      - 'README.md'
      # - '.github/**'
      - 'docs/**'
      - '*.md'
  # pull_request:
  #   branches: [dev, test, stage, main]
  #   types: [opened, synchronize, reopened, closed]

env:
  # Vercel Deploy Hooks
  DEV_VERCEL_DEPLOY_HOOK: https://ipconfig.io
  TEST_VERCEL_DEPLOY_HOOK: https://api.vercel.com/v1/integrations/deploy/prj_xxfahXm1w8Jp0sggQxOx0QjcS48j/q3PFlD1NnD
  STAGE_VERCEL_DEPLOY_HOOK: https://api.vercel.com/v1/integrations/deploy/prj_IiR0vlrTNsASachdmW7qv5ODZQeg/bsybtC1saE
  # tmp: deploy main branch to stage env on Vercel
  PROD_VERCEL_DEPLOY_HOOK: https://api.vercel.com/v1/integrations/deploy/prj_IiR0vlrTNsASachdmW7qv5ODZQeg/bsybtC1saE

  # Frontend Websites / Domains
  DEV_DOMAIN: https://
  TEST_DOMAIN: https://test.polyflow.tech/
  STAGE_DOMAIN: https://stage-pid-frontend.vercel.app/
  # tmp: use stage domain
  PROD_DOMAIN: https://stage-pid-frontend.vercel.app/

  # Lark/Feishu Bot Webhook
  LARK_BOT_HOOK: https://open.larksuite.com/open-apis/bot/v2/hook/4caeb13f-8054-4284-bd67-bed7a918b750

jobs:
  trigger-deployment-and-send-notification:
    runs-on: ubuntu-latest
    steps:

      - name: Determine environment settings
        id: set-env
        run: |
          # For tags (e.g., v1.0.0)
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "ENV_NAME=Production (Tag)" >> $GITHUB_ENV
            echo "ENV_DOMAIN=PROD_DOMAIN_NOT_SET" >> $GITHUB_ENV
            echo "IS_TAG=true" >> $GITHUB_ENV
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            
          # # For pull requests
          # elif [ "${{ github.event_name }}" == "pull_request" ]; then
          #   echo "ENV_NAME=PR Preview" >> $GITHUB_ENV
          #   echo "ENV_DOMAIN=PR_PREVIEW_NOT_SET" >> $GITHUB_ENV
          #   echo "IS_PR=true" >> $GITHUB_ENV
          #   echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
            
          # For branch pushes
          else
            case "${{ github.ref }}" in
              "refs/heads/dev")
                echo "VERCEL_URL=${{ env.DEV_VERCEL_DEPLOY_HOOK }}" >> $GITHUB_ENV
                echo "ENV_NAME=Development" >> $GITHUB_ENV
                echo "ENV_DOMAIN=${{ env.DEV_DOMAIN }}" >> $GITHUB_ENV
                ;;
              "refs/heads/test")
                echo "VERCEL_URL=${{ env.TEST_VERCEL_DEPLOY_HOOK }}" >> $GITHUB_ENV
                echo "ENV_NAME=Test" >> $GITHUB_ENV
                echo "ENV_DOMAIN=${{ env.TEST_DOMAIN }}" >> $GITHUB_ENV
                ;;
              "refs/heads/stage")
                echo "VERCEL_URL=${{ env.STAGE_VERCEL_DEPLOY_HOOK }}" >> $GITHUB_ENV
                echo "ENV_NAME=Staging" >> $GITHUB_ENV
                echo "ENV_DOMAIN=${{ env.STAGE_DOMAIN }}" >> $GITHUB_ENV
                ;;
              "refs/heads/main")
                echo "VERCEL_URL=${{ env.PROD_VERCEL_DEPLOY_HOOK }}" >> $GITHUB_ENV
                echo "ENV_NAME=Production" >> $GITHUB_ENV
                echo "ENV_DOMAIN=${{ env.PROD_DOMAIN }}" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Trigger Vercel Deployment
        # if: |
        #   (github.event_name == 'push' && !contains(github.ref, 'refs/tags/')) || 
        #   (github.event_name == 'pull_request')
        run: |
          if [ -z "${{ env.VERCEL_URL }}" ]; then
            echo "No deployment hook configured for ${{ env.ENV_NAME }}"
            exit 0
          fi
          
          echo "Triggering ${{ env.ENV_NAME }} deployment..."

          echo "Deployment triggered successfully"

      - name: Prepare notification data
        id: prepare-notification
        run: |
          # Create description based on event type

            DESCRIPTION=$(echo "**Tag:** ${{ env.TAG_NAME }}\n**Environment:** ${{ env.ENV_NAME }}" | jq -Rs .)

            DESCRIPTION=$(echo "**PR:** #${{ github.event.number }}\n**Branch:** ${{ github.head_ref }}" | jq -R .)

            DESCRIPTION=$(echo "**Branch:** ${{ github.ref_name }}\n**Environment:** ${{ env.ENV_NAME }}" | jq -Rs .)


          DESCRIPTION=$(
            if [ "${{ env.IS_TAG }}" = "true" ]; then
              printf "**Tag: ** %s\n**Environment: ** %s" "${{ env.TAG_NAME }}" "${{ env.ENV_NAME }}"
            elif [ "${{ env.IS_PR }}" == "true" ]; then
              printf "**PR: ** %s\n**Branch: ** %s" "${{ github.event.number }}" "${{ github.head_ref }}"
            else
              printf "**Branch: ** %s\n**Environment: ** %s" "${{ github.ref_name }}" "${{ env.ENV_NAME }}"
            fi | jq -Rs .
          )

          TITLE=$(
            if [ "${{ env.IS_TAG }}" = "true" ]; then
              echo "é€šçŸ¥: Verceléƒ¨ç½² - ðŸš€ New Release Tag"
            elif [ "${{ env.IS_PR }}" == "true" ]; then
              echo "é€šçŸ¥: Verceléƒ¨ç½² - ðŸ”€ Pull Request Update"
            else
              echo "é€šçŸ¥: Verceléƒ¨ç½² - ðŸ”„ Branch Update"
            fi | jq -R .
          )
          
          # Create the JSON payload using jq
          CARD_PAYLOAD=$(jq -n \
            --arg description "$DESCRIPTION" \
            --arg title "$TITLE" \
            --arg repo "$(echo '${{ github.repository }}' | jq -R .)" \
            --arg sha "$(echo '${{ github.sha }}' | cut -c1-7)" \
            --arg actor "$(echo '${{ github.actor }}' | jq -R .)" \
            --arg domain "$ENV_DOMAIN" \
            "{
              "msg_type": "text",
              "content": {
                "text": "Test Message"
              }
              }")

          echo "CARD_PAYLOAD=${CARD_PAYLOAD}" >> $GITHUB_OUTPUT

      - name: Debug payload
        if: always()
        run: |
          echo "Generated payload:"
          echo '${{ steps.prepare-notification.outputs.CARD_PAYLOAD }}' | jq .

      - name: Send Lark Notification
        if: always()
        run: |
          echo "Sending notification to Lark..."
          if ! curl -X POST \
            "${{ env.LARK_BOT_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '${{ steps.prepare-notification.outputs.CARD_PAYLOAD }}'; then
            echo "Failed to send notification"
            exit 1
          fi
          echo "Notification sent successfully"
